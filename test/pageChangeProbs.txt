shows reading progress but page doesnt change
import 'dart:async';
import 'dart:convert';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:epubz/epubz.dart';
import 'package:epubz/epubz.dart' as epubz;
import 'package:html/parser.dart';
import 'package:image/image.dart' as image;
import 'package:flutter_inappwebview/flutter_inappwebview.dart';
import 'package:path_provider/path_provider.dart';
import 'package:url_launcher/url_launcher.dart';

class ReaderPage extends StatefulWidget {
  final String path;
  const ReaderPage({
    Key? key,
    required this.path,
  }) : super(key: key);

  @override
  _ReaderPageState createState() => _ReaderPageState();
}

class _ReaderPageState extends State<ReaderPage>
    with SingleTickerProviderStateMixin {
  epubz.EpubBook? epubBook;
  late double pageWidth = MediaQuery.of(context).size.width;
  late double pageHeight = MediaQuery.of(context).size.height;
  late String epubContent;
  InAppWebViewController? webViewController;
  String? title;
  late final UserLocationManager locationManager;
  late final PageManager pageManager;
  late final ChapterManager chapterManager;

  late int currentChapterIndex; // To keep track of the current chapter
  late double scrollX = 0; // Initialize scroll position
  double fontSize = 12.3; // Default font size
  int totalPages = 0;
  int currentPageIndex = 0;

  @override
  void initState() {
    super.initState();
    pageManager = PageManager();

    initialize();
  }

  Future<void> initialize() async {
    File file = File(widget.path);
    List<int> bytes = await file.readAsBytes();
    epubBook = await epubz.EpubReader.readBook(bytes);
    epubContent = generateHtmlContent(epubBook!);

    currentChapterIndex = 0; // Initialize the current chapter index
    chapterManager = ChapterManager(
        epubBook!.Schema!.Package!.Spine!.Items!.cast<SpineItem>());
    // Use savedLocation to navigate to the last read position
    locationManager = UserLocationManager(
      epubBook!.Title!,
      pageManager,
      chapterManager,
      // currentChapterIndex
    );
    await locationManager.loadLocation();
    // await locationManager.loadSavedPage(webViewController!, pageWidth);
    setState(() {}); // Update the UI after initializing

    totalPages = epubBook!.Schema!.Package!.Spine!.Items!.length;
    title = epubBook!.Title;
    // spineFiles =
    //     epubBook!.Schema!.Package!.Spine!.Items!.cast<EpubContentFile>();
  }

  // Create a new HTML document
  String generateHtmlContent(epubz.EpubBook book) {
    // String html = "<html><body>";
    String html = "<html><head>";
    html += "<style>";
    html += "body {";
    html += "margin: 28px 28px 20px;";
    // html += "margin: 20px 0px;";
    html += "font-size: 2.3em;";
    html += "line-height: 1.0;";
    html += "font-weight: normal;";
    html += "letter-spacing: 0;";
    html += "word-spacing: 0;";
    html += "text-align: left;";
    html += "font-family: Arial;";
    html += "font-path: '';";
    html += "}";
    html += "</style>";
    html += "</head><body>";
    // for (var chapter in book.Chapters!) {
    //   html += "<h1>${chapter.Title}</h1>";
    //   for (var section in chapter.SubChapters!) {
    //     html += "<h2> ${section.Title}</h2>";
    //     if (section.HtmlContent is String) {
    //       html += "<p>${section.HtmlContent}</p>";
    //     } else if (section.HtmlContent is epubz.EpubContent) {
    //       var content = section.HtmlContent as epubz.EpubContent;
    //       for (var file in content.Html!.values) {
    //         html += "<p>${file.Content}</p>";
    //       }
    //     }
    //   }
    // }
    for (var chapter in book.Chapters!) {
      for (var section in chapter.SubChapters!) {
        if (section.HtmlContent is String) {
          html +=
              "<div style='margin: 0 28px;'>"; // Add margin for each chapter/section
          html += "<p>${section.HtmlContent}</p>";
          html += "</div>";
        } else if (section.HtmlContent is epubz.EpubContent) {
          var content = section.HtmlContent as epubz.EpubContent;
          for (var file in content.Html!.values) {
            html +=
                "<div style='margin: 0 28px;'>"; // Add margin for each chapter/section
            html += "<p>${file.Content}</p>";
            html += "</div>";
          }
        }
      }
    }
    html += "</body></html>";
    return html;
  }

  Future<void> saveCurrentPage() async {
    await locationManager.saveLocation();
  }

  Future<void> onChapterSelected(int chapterIndex) async {
    await chapterManager.navigateToChapter(chapterIndex);
    locationManager.saveLocation();
    // Update the webview or navigation based on the selected chapter
    // updateWebViewContent();
    setState(() {});
  }

  void handleInternalLink(Uri uri) {
    // Extract chapter and page information from the URI
    // Example: /chapter-2/page-3
    String chapterPath = uri.pathSegments[0];
    String pagePath = uri.pathSegments[1];

    // Convert chapterPath and pagePath to chapter index and page index
    int chapterIndex =
        int.parse(chapterPath.split('-')[1]) - 1; // Convert to 0-based index
    int pageIndex =
        int.parse(pagePath.split('-')[1]) - 1; // Convert to 0-based index

    // Update pageManager.currentPage and locationManager accordingly
    pageManager.updateCurrentPage(pageIndex);
    locationManager.pageManager.updateCurrentPage(pageIndex);
    locationManager.chapterManager.navigateToChapter(chapterIndex);
  }

  // Define a function to handle navigation to a specific page
  Future<void> navigateToPage(int pageIndex) async {
    try {
      print('navigate to page started');
      final double scrollOffset = pageIndex * pageWidth;
      await webViewController?.scrollTo(
          x: scrollOffset.toInt(), y: 0, animated: false);
      setState(() {
        currentPageIndex = pageIndex; // Update the current page index
      });
      // pageManager.currentPage = pageIndex;
      // updateWebViewContent(); // Update the content when navigating to a new page
    } catch (e) {
      print('error navigating to page: $e');
    }
  }

  // Method to update WebView content
  Future<void> updateWebViewContent(String newContent) async {
    if (webViewController != null) {
      // final newHtmlCOntent = generateHtmlContent(epubBook!);
      await webViewController!
          .loadData(data: newContent, mimeType: 'text/html');
    }
  }

  @override
  void dispose() {
    SystemChrome.setEnabledSystemUIMode(SystemUiMode.edgeToEdge);
    saveCurrentPage(); // Save the current page when the reader is disposed
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    if (epubBook == null || epubContent == null) {
      return const Center(child: CircularProgressIndicator());
    }
    SystemChrome.setEnabledSystemUIMode(SystemUiMode.immersiveSticky);
    pageWidth = MediaQuery.of(context).size.width;
    pageHeight = MediaQuery.of(context).size.height;

    return Scaffold(
      // appBar: AppBar(
      //   title: const Text('book reader'),
      // ),
      // End of AppBar
      // drawer: Drawer(
      // child: EpubViewTableOfContents(controller: _epubReaderController),
      // ),

      body: GestureDetector(
        onHorizontalDragEnd: (details) {
          if (details.primaryVelocity! > 0) {
            // Swipe right, go to previous page
            if (pageManager.currentPage > 0) {
              pageManager.currentPage -= 1;
              navigateToPage(pageManager.currentPage);
            }
          } else if (details.primaryVelocity! < 0) {
            // Swipe left, go to next page
            if (pageManager.currentPage < totalPages - 1) {
              pageManager.currentPage += 1;
              navigateToPage(pageManager.currentPage);
            }
          }
        },
        onScaleUpdate: (details) {
          final newFontSize = fontSize * details.scale;
          if (newFontSize >= 1 && newFontSize <= 5) {
            setState(() {
              fontSize = newFontSize;
            });
          }
        },
        child: Stack(
          children: [
            InAppWebView(
              initialData: InAppWebViewInitialData(
                data: epubContent,
                mimeType: 'text/html',
              ),
              initialOptions: InAppWebViewGroupOptions(
                  crossPlatform: InAppWebViewOptions(
                useShouldOverrideUrlLoading: true,
                javaScriptEnabled: true,
              )),
              onWebViewCreated: (controller) {
                // Add your code here to handle web view events
                webViewController = controller;
                // Navigate to the saved page index when web view is created
                locationManager.loadSavedPage(webViewController!, pageWidth);
                // Load the current page content here
                webViewController!.loadData(
                  data: epubContent,
                  mimeType: 'text/html',
                );
              },
              onConsoleMessage: (controller, consoleMessage) {
                // Handle console messages from the web view
                print('Console Message: ${consoleMessage.message}');
              },
              onLoadStop: (controller, url) async {
                await locationManager.loadSavedPage(
                    webViewController!, pageHeight);
                // await webViewController!.scrollTo(x: scrollX.toInt(), y: 0);
                webViewController!.scrollTo(
                    x: pageManager.currentPage * pageWidth.toInt(),
                    y: 0,
                    animated: false);
                // // Render the new page when the web view is loaded
                // webViewController!.evaluateJavascript(
                //     source: 'document.body.style.fontSize = "${fontSize}px"');
              },
              onScrollChanged: (controller, x, y) {
                // Calculate the current page
                final int newPageIndex = (x / pageWidth).toInt();

                setState(() {
                  currentPageIndex = newPageIndex;
                });
                // pageManager.updateCurrentPage(currentPage);
                // locationManager.pageManager.updateCurrentPage(currentPage);
                saveCurrentPage(); // Save the current page on scroll
              },
              shouldOverrideUrlLoading: (controller, navigationAction) async {
                // Allow loading other URLs and external links
                final uri = Uri.parse(navigationAction.request.url!.toString());
                if (uri.host == 'your.epub.site') {
                  // Handle internal links
                  handleInternalLink(uri);
                  return NavigationActionPolicy.CANCEL;
                } else {
                  // Handle external links
                  launchUrl(uri); // Using the launch package
                  return NavigationActionPolicy.ALLOW;
                }
              },
            ),
            Positioned(
                child: LinearProgressIndicator(
              value: pageManager.currentPage / totalPages,
              // Change the value based on the current page and total pages
              backgroundColor: Colors.blueGrey,
              valueColor: const AlwaysStoppedAnimation<Color>(Colors.red),
            ))
          ],
        ),
      ),
    );
  }
}

class UserLocationManager {
  final String bookTitle;
  final PageManager pageManager; // Reference to the PageManager class
  final ChapterManager chapterManager;
  UserLocationManager(String bookTitle, this.pageManager, this.chapterManager)
      : this.bookTitle = bookTitle;

  Future<void> loadLocation() async {
    final jsonFile = await _getLocationFile();
    print('book title load is $bookTitle');
    try {
      if (jsonFile.existsSync()) {
        final jsonString = json.decode(jsonFile.readAsStringSync());
        final location = jsonString['location'];
        if (location is int) {
          print('location is int');
          pageManager.updateCurrentPage(location);
        } else {
          print('location is not int');
        }
      }
    } catch (error) {
      print('Error loading location: $error');
    }
  }

  Future<void> saveLocation() async {
    print('book title for losave is $bookTitle');
    final jsonFile = await _getLocationFile();
    // try {
    // final jsonString = json.decode(jsonFile.readAsStringSync());
    final jsonString = json.encode({'location': pageManager.currentPage});
    // jsonString['location'] = pageManager.currentPage;
    try {
      // await jsonFile.writeAsString(json.encode(jsonString));
      await jsonFile.writeAsString(jsonString);
    } catch (error) {
      print('Error saving location: $error');
    }
  }

  Future<void> loadSavedPage(
      InAppWebViewController controller, double pageWidth) async {
    // double pageHeight = 0;
    // late double pageHeight = MediaQuery.of(context).size.height;
    // pageHeight = MediaQuery.of(context).size.height;

    final double scrollOffset = pageManager.currentPage * pageWidth;
    await controller.scrollTo(x: scrollOffset.toInt(), y: 0, animated: false);
  }

  Future<File> _getLocationFile() async {
    var appDir = await getExternalStorageDirectory();
    var jsonPath = "${appDir!.path}/ebooks/data";
    final fileName = '$bookTitle.json';
    print('filename is $fileName');
    return File('$jsonPath/$fileName');
  }
}

class SpineItem {
  final String title;
  final String contentFileName;

  SpineItem(this.title, this.contentFileName);
}

class PageManager {
  int currentPage = 5; // Default current page is the first page

  void updateCurrentPage(int newPageIndex) {
    currentPage = newPageIndex;
    print('currentpage is $currentPage');
  }
}

class ChapterManager {
  final List<SpineItem> spineItems;

  ChapterManager(this.spineItems);

  List<String> getChapterTitles() {
    return spineItems.map((item) => item.title).toList();
  }

  Future<void> navigateToChapter(int index) async {
    final contentFileName = spineItems[index].contentFileName;
// Use contentFileName to navigate to the chapter content
// You can use the webViewController to navigate in WebView
  }
}
